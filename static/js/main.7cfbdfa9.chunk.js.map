{"version":3,"sources":["components/Input/Input.tsx","pages/Home/SearchBox/SearchBox.tsx","components/Checkbox/Checkbox.tsx","components/Radio/Radio.tsx","components/Listbox/Listbox.tsx","constants/defaults.ts","constants/filters.ts","Remote.ts","constants/utilities.ts","pages/Home/FiltersList/FiltersList.tsx","pages/Home/ActiveFilters/ActiveFilters.tsx","components/CandidateCard/CandidateCard.tsx","pages/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","forwardRef","props","type","ref","classList","_props","inputClass","classnames","className","SearchBox","this","keyword","handleKeywordChange","inputClassList","length","htmlFor","id","name","value","onChange","Component","Checkbox","size","label","inputProps","checkboxClass","Radio","radioClass","Listbox","key","children","selectProps","selectedDefaults","constituencyType","constituency","camp","checkedDefaults","youngerThan36","freshFace","independent","inPrimary","partialSelectSet","checkboxSet","Remote","axios","get","res","includes","status","constituencies","data","Error","statusText","candidates","personalInfoList","setConstituencies","setCandidates","setPersonalInfoList","selectTypes","checkboxIds","filters","notNull","x","isSelectType","isCheckboxId","createConstituencyTypeMap","reduce","prev","current","createPersonalInfoMap","getFullSelectSet","selectSet","map","obj","FiltersList","createSelectOption","createCheckbox","checked","group","handleCheckboxChange","createRadioOption","handleSelectChange","handleConstTypeChange","event","target","handleConstChange","selected","constTypeMap","_","allConsts","allConstTypes","allCamps","defaultConstId","defaultConstTypeId","constId","constTypeId","checkboxGroup","constTypeSelectGroup","constSelectGroup","filter","campSelectGroup","disabled","ActiveFilters","handleCheckboxTagClick","handleSelectTagClick","initialValue","handleClick","onClick","campTag","constituencyTags","Object","keys","selectedId","selectOption","find","opt","createFilterTag","personalInfoTags","checkboxOption","selectedID","selectedOption","filterTagGroups","tags","index","activeFiltersClass","CandidateCard","colorMap","dem","est","ctr","campMap","firstCandidate","list","affiliation","headerText","getCampFromId","captionElem","href","headerClass","getColorFromCampId","Home","personalInfoMap","constTypeLabelMap","toggleFilterPanel","setState","prevState","showFiltersPanel","currentState","currentConstType","prevConstType","prevConst","previouslyChecked","filterCandidates","state","currentFilters","filterDefaults","constituencyId","names","Array","isArray","search","personalInfo","dob","age","then","DateTime","fromISO","now","local","Math","floor","diff","years","currentCandidate","prop","resourceFetched","Promise","all","getConstituencies","getCandidates","getPersonalInfoList","results","push","catch","err","console","error","candidate","firstCandInfo","constName","typeId","constType","filteredCands","candObj","candListItems","createCandidateCard","filtered","constSections","constObj","createConstituencySection","searchBoxProps","filtersListProps","activeFiltersProps","filtersPanelClass","homeClass","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7cfbdfa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport {\r\n  ClassList\r\n} from 'constants/types';\r\n\r\nimport './Input.scss';\r\n\r\nexport interface InputProps extends ClassList {\r\n  type?: 'text' | 'number',\r\n  name?: string,\r\n  id?: string,\r\n  value?: string,\r\n  placeholder?: string,\r\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\r\n}\r\n\r\nexport type InputRef = HTMLInputElement;\r\n\r\nexport default React.forwardRef<InputRef, InputProps>((props = { type: 'text' }, ref) => {\r\n  const {\r\n    classList,\r\n    ..._props\r\n  } = props;\r\n  const inputClass = classnames(\r\n    ...(classList || []),\r\n    'legco-input'\r\n  );\r\n  return (\r\n    <input {..._props} className={ inputClass } ref={ ref } />\r\n  )\r\n});\r\n","import React, { Component } from 'react';\r\n\r\nimport Input from 'components/Input/Input';\r\n\r\nimport {\r\n  SearchBoxProps,\r\n} from 'constants/types';\r\n\r\nimport './SearchBox.scss';\r\n\r\nexport default class SearchBox extends Component<SearchBoxProps> {\r\n  render() {\r\n    const {\r\n      keyword,\r\n      handleKeywordChange\r\n    } = this.props;\r\n    \r\n    // To visually hide label, we lift input up when\r\n    // [1] input is in focus (handled by CSS) or\r\n    // [2] input is not empty.\r\n    const inputClassList = [\r\n      'search-box__input',\r\n      keyword.length > 0 ? 'search-box__input--filled' : null // [2]\r\n    ];\r\n    return (\r\n      <div className=\"search-box\">\r\n        <label \r\n          className=\"legco-label search-box__label\" \r\n          htmlFor=\"name_input\"\r\n        >搜索候選人</label>\r\n        <Input\r\n          classList={ inputClassList }\r\n          id=\"name_input\"\r\n          name=\"name\" \r\n          value={ keyword } \r\n          onChange={ handleKeywordChange } />\r\n        <button className=\"search-box__button\" type=\"button\"></button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport './Checkbox.scss';\r\n\r\nexport interface CheckboxProps {\r\n  id: string,\r\n  name: string,\r\n  label: string,\r\n  checked: boolean,\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>,\r\n  size?: 'small',\r\n}\r\n\r\nclass Checkbox extends React.Component<CheckboxProps> {\r\n  render() {\r\n    const { size, label, ...inputProps } = this.props;\r\n    const checkboxClass = classnames(\r\n      'legco-checkbox',\r\n      size === 'small' ? 'legco-checkbox--small' : null,\r\n    );\r\n    return (\r\n      <div className={ checkboxClass }>\r\n        <input \r\n          className=\"legco-checkbox__input\"\r\n          type=\"checkbox\" \r\n          {...inputProps} />\r\n        <label className=\"legco-checkbox__label\" htmlFor={ inputProps.id }>\r\n          { label }\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport './Radio.scss';\r\n\r\nexport interface RadioProps {\r\n  size?: 'small',\r\n  id: string,\r\n  name: string,\r\n  label: string,\r\n  checked: boolean,\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>\r\n}\r\n\r\nclass Radio extends React.Component<RadioProps> {\r\n  render() {\r\n    // [1] forms part of the container class list,\r\n    // [2] is the label text, and\r\n    // [3] is props for the input element.\r\n    const {\r\n      size, // [1]\r\n      label, // [2]\r\n      ...inputProps // [3]\r\n    } = this.props;\r\n\r\n    const radioClass = classnames(\r\n      'legco-radio',\r\n      size === 'small' ? 'legco-radio--small' : null,\r\n    );\r\n    return (\r\n      <div className={ radioClass }>\r\n        <input \r\n          className=\"legco-radio__input\"\r\n          type=\"radio\" \r\n          {...inputProps} />\r\n        <label className=\"legco-radio__label\" htmlFor={ inputProps.id }>\r\n          { label }\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radio;","import React from 'react';\r\n\r\nimport './Listbox.scss';\r\n\r\nexport interface ListboxProps {\r\n    id: string, \r\n    name: string, \r\n    value: string, \r\n    onChange: React.ChangeEventHandler<HTMLSelectElement>,\r\n    disabled?: boolean\r\n}\r\n\r\nexport interface Option {\r\n  value: string,\r\n  label: string,\r\n}\r\n\r\nexport default class Listbox extends React.Component<ListboxProps> {\r\n  createOption(value: string, label: string) {\r\n    return <option key={ value } value={ value } >{ label }</option>;\r\n  }\r\n  render() {\r\n    const {children, ...selectProps } = this.props;\r\n    return (\r\n      <div className=\"legco-listbox\">\r\n        <select {...selectProps} className=\"legco-select\">\r\n          { children }\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Selected,\r\n  Checked\r\n} from 'constants/types';\r\n\r\n// We use \"all\" for political position because it's a real option in the\r\n// select set.\r\nexport const selectedDefaults: Selected = {\r\n  constituencyType: 'all',\r\n  constituency: 'all',\r\n  camp: 'all'\r\n}\r\n\r\nexport const checkedDefaults: Checked = {\r\n  youngerThan36: false,\r\n  freshFace: false,\r\n  independent: false,\r\n  inPrimary: false\r\n}\r\n","import {\r\n  SelectSet,\r\n  CheckboxSet\r\n} from 'constants/types';\r\n\r\nexport const partialSelectSet: SelectSet = {\r\n  constituencyType: [\r\n    {\r\n      id: 'gc',\r\n      name: '地方選區'\r\n    },\r\n    {\r\n      id: 'fc',\r\n      name: '功能組別選區'\r\n    }  \r\n  ],\r\n  constituency: [],\r\n  camp: [\r\n    {\r\n      id: 'all',\r\n      name: '不限'\r\n    },\r\n    {\r\n      id: 'est',\r\n      name: '建制派'\r\n    },\r\n    {\r\n      id: 'dem',\r\n      name: '民主派'\r\n    },\r\n    {\r\n      id: 'ctr',\r\n      name: '中間派'\r\n    }\r\n  ]\r\n};\r\n\r\nexport const checkboxSet: CheckboxSet = [\r\n  {\r\n    id: 'youngerThan36', \r\n    name: '35嵗及以下候選人'\r\n  },\r\n  {\r\n    id: 'inPrimary',\r\n    name: '參與民主派初選'\r\n  },\r\n  {\r\n    id: 'freshFace',\r\n    name: '首次參選立法會'\r\n  },\r\n  {\r\n    id: 'independent',\r\n    name: '無政黨背景'\r\n  }\r\n];\r\n","import axios from 'axios';\r\nimport {\r\n  Constituency,\r\n  Candidate,\r\n  PersonalInfo,\r\n} from 'constants/types';\r\n\r\nexport default class Remote {\r\n  static constituencies: Constituency[];\r\n  static candidates: Candidate[];\r\n  static personalInfoList: PersonalInfo[];\r\n\r\n  static async setConstituencies() {\r\n    const url = process.env.PUBLIC_URL + '/assets/constituencies.json';\r\n    try {\r\n      const res = await axios.get(url);\r\n      if ([200, 201].includes(res.status)) {\r\n        this.constituencies = res.data;\r\n      } else {\r\n        this.constituencies = [];\r\n        throw Error(res.statusText);\r\n      }\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async setCandidates() {\r\n    const url = process.env.PUBLIC_URL + '/assets/candidates.json';\r\n    try {\r\n      const res = await axios.get(url);\r\n      if ([200, 201].includes(res.status)) {\r\n        this.candidates = res.data;\r\n      } else {\r\n        this.candidates = [];\r\n        throw Error(res.statusText);\r\n      }\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async setPersonalInfoList() {\r\n    const url = process.env.PUBLIC_URL + '/assets/personalInfo.json';\r\n    try {\r\n      const res = await axios.get(url);\r\n      if ([200, 201].includes(res.status)) {\r\n        this.personalInfoList = res.data;\r\n      } else {\r\n        this.personalInfoList = [];\r\n        throw Error(res.statusText);\r\n      }\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async getConstituencies() {\r\n    if (!this.constituencies) {\r\n      await this.setConstituencies();\r\n    }\r\n    return this.constituencies;\r\n  }\r\n\r\n  static async getCandidates() {\r\n    if (!this.candidates) {\r\n      await this.setCandidates();\r\n    }\r\n    return this.candidates;\r\n  }\r\n\r\n  static async getPersonalInfoList() {\r\n    if (!this.personalInfoList) {\r\n      await this.setPersonalInfoList();\r\n    }\r\n    return this.personalInfoList;\r\n  }\r\n}\r\n","import { DateTime } from 'luxon';\r\nimport {\r\n  SelectType,\r\n  CheckboxId,\r\n  Filter,\r\n  ConstituencyTypeMap,\r\n  SelectSet,\r\n  Constituency,\r\n  PersonalInfo,\r\n  PersonalInfoMap\r\n} from 'constants/types';\r\n\r\nimport Remote from 'Remote';\r\n\r\nconst selectTypes = [\r\n  'constituencyType',\r\n  'constituency',\r\n  'camp'\r\n];\r\n\r\nconst checkboxIds = [\r\n  'youngerThan36',\r\n  'inPrimary',\r\n  'freshFace',\r\n  'independent'  \r\n];\r\n\r\nconst filters = [\r\n  ...selectTypes,\r\n  ...checkboxIds\r\n];\r\n\r\n/**\r\n * Type guard to check if an variable is not undefined.\r\n * \r\n * @param x has type `T` or `undefined`.\r\n */\r\nexport function notUndefined<T>(x: T | undefined): x is T {\r\n  return x !== undefined;\r\n}\r\n\r\nexport function notNull<T>(x: T | null): x is T {\r\n  return x !== null;\r\n}\r\n\r\nexport function isArray(x: any[] | any): x is any[] {\r\n  return Array.isArray(x);\r\n}\r\n\r\nexport function isString(x: string | any): x is string {\r\n  return typeof x === 'string';\r\n}\r\n\r\n/**\r\n * Type guard to check if a string is `SelectType`.\r\n * \r\n * @param x has type `string` or `SelectType`.\r\n */\r\nexport function isSelectType(x: SelectType | string): x is SelectType {\r\n  return selectTypes.includes(x);\r\n}\r\n\r\nexport function isCheckboxId(x: CheckboxId | string): x is CheckboxId {\r\n  return checkboxIds.includes(x);\r\n}\r\n\r\nexport function isFilter(x: Filter | string): x is Filter {\r\n  return filters.includes(x);\r\n}\r\n\r\n/**\r\n * Calculate age from date of birth.\r\n * \r\n * @param dob Date of birth in \"yyyy-mm-dd\" format.\r\n */\r\nexport function calculateAge(dob: string): number {\r\n  const then = DateTime.fromISO(dob);\r\n  const now = DateTime.local();\r\n  return Math.floor(now.diff(then, 'years').years);\r\n}\r\n\r\nexport const getConstituencies = () => Remote.getConstituencies();\r\nexport const getCandidates = () => Remote.getCandidates();\r\nexport const getPersonalInfoList = () => Remote.getPersonalInfoList();\r\n\r\nexport function getCandidateInfoMap(\r\n  personalInfoList: PersonalInfo[]\r\n) {\r\n  const map: Record<string, PersonalInfo> = personalInfoList\r\n    .reduce((prev, current) => {\r\n      return {\r\n        ...prev,\r\n        [current.id]: current\r\n      };\r\n    }, {});\r\n  \r\n  return map;\r\n}\r\n\r\nexport function createConstituencyTypeMap(\r\n  constituencies: Constituency[]\r\n) {\r\n  const constituencyTypeMap: ConstituencyTypeMap = \r\n    constituencies.reduce((prev, current) => {\r\n      return {\r\n        ...prev,\r\n        [current.id]: current.type\r\n      }\r\n    }, {});\r\n\r\n  return constituencyTypeMap;\r\n}\r\n\r\nexport function createPersonalInfoMap(\r\n  personalInfoList: PersonalInfo[]\r\n) {\r\n  const personalInfoMap: PersonalInfoMap = \r\n    personalInfoList.reduce((prev, current) => {\r\n      return {\r\n        ...prev,\r\n        [current.id]: current\r\n      }\r\n    }, {});\r\n  \r\n  return personalInfoMap;\r\n}\r\n\r\nexport function getFullSelectSet(\r\n  selectSet: SelectSet,\r\n  constituencies: Constituency[]\r\n): SelectSet {\r\n  return {\r\n    ...selectSet,\r\n    constituency: constituencies.map(obj => {\r\n      return {\r\n        id: obj.id,\r\n        name: obj.name\r\n      }\r\n    })\r\n  };\r\n}\r\n","import React, { \r\n  ChangeEventHandler \r\n} from 'react';\r\n\r\nimport Checkbox, { CheckboxProps } from 'components/Checkbox/Checkbox';\r\nimport Radio, { RadioProps } from 'components/Radio/Radio';\r\nimport Listbox from 'components/Listbox/Listbox';\r\n\r\nimport {\r\n  SelectType, \r\n  CheckboxId,\r\n  FiltersListProps\r\n} from 'constants/types';\r\n\r\nimport {\r\n  selectedDefaults\r\n} from 'constants/defaults';\r\n\r\nimport {\r\n  partialSelectSet,\r\n  checkboxSet\r\n} from 'constants/filters';\r\n\r\nimport * as _ from 'constants/utilities';\r\n\r\nimport './FiltersList.scss';\r\n\r\nexport default class FiltersList extends React.Component<FiltersListProps> {\r\n  /**\r\n   * Returns a select option.\r\n   * \r\n   * @param value Value of this option.\r\n   * @param label Display text of this option.\r\n   */\r\n  createSelectOption = (value: string, label: string) => {\r\n    return (\r\n      <option key={ value } value={ value }>\r\n        { label }\r\n      </option>\r\n    );\r\n  }\r\n\r\n  createCheckbox = (\r\n    id: CheckboxId,\r\n    label: string,\r\n    checked: boolean,\r\n    group?: string,\r\n  ) => {\r\n    const props: CheckboxProps = {\r\n      id,\r\n      label,\r\n      checked,\r\n      // Group checkboxes by category name, or their IDs when name is not given.\r\n      name: group || id,\r\n      size: 'small',\r\n      onChange: () => {\r\n        this.props.handleCheckboxChange(id)\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Checkbox key={ id } {...props} />\r\n    );\r\n  }\r\n\r\n  createRadioOption = (\r\n    id: string,\r\n    label: string, \r\n    checked: boolean,\r\n    type: SelectType\r\n  ) => {\r\n    const props: RadioProps = {\r\n      id,\r\n      label,\r\n      checked,\r\n      size: 'small',\r\n      name: type,\r\n      onChange: () => {\r\n        this.props.handleSelectChange(type, id)\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Radio key={ id } {...props} />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handler for change events on the constituency type select group. Updates\r\n   * selected state to reflect the user's choice.\r\n   * \r\n   * @param event Change event on the select group.\r\n   */\r\n  handleConstTypeChange: ChangeEventHandler<HTMLSelectElement> = event => {\r\n    const { value } = event.target;\r\n    this.props.handleSelectChange('constituencyType', value);\r\n  }\r\n\r\n  /**\r\n   * Handler for change events on the constituency select group. Updates\r\n   * selected state to reflect the user's choice.\r\n   * \r\n   * @param event Change event on the select group.\r\n   */\r\n  handleConstChange: ChangeEventHandler<HTMLSelectElement> = event => {\r\n    const { value } = event.target;\r\n    this.props.handleSelectChange('constituency', value);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      selected,\r\n      checked,\r\n      constituencies\r\n    } = this.props;\r\n\r\n    const constTypeMap = _.createConstituencyTypeMap(\r\n      constituencies\r\n    );\r\n    const selectSet = _.getFullSelectSet(\r\n      partialSelectSet,\r\n      constituencies\r\n    );\r\n\r\n    const {\r\n      constituency: allConsts,\r\n      constituencyType: allConstTypes,\r\n      camp: allCamps\r\n    } = selectSet;\r\n\r\n    const {\r\n      constituency: defaultConstId,\r\n      constituencyType: defaultConstTypeId\r\n    } = selectedDefaults;\r\n\r\n    const {\r\n      constituency: constId,\r\n      constituencyType: constTypeId\r\n    } = selected;\r\n\r\n    const checkboxGroup = checkboxSet\r\n      .map(obj => {\r\n        const {\r\n          id,\r\n          name\r\n        } = obj;\r\n        return this.createCheckbox(\r\n          id,\r\n          name,\r\n          checked[id]\r\n        );\r\n      });\r\n\r\n    const constTypeSelectGroup = allConstTypes\r\n      .map(obj => this.createSelectOption(obj.id, obj.name));\r\n\r\n    const constSelectGroup = allConsts\r\n      .filter(obj => constTypeMap[obj.id] === constTypeId)\r\n      .map(obj => this.createSelectOption(obj.id, obj.name));\r\n\r\n    const campSelectGroup = allCamps\r\n      .map(obj => {\r\n        const {\r\n          id,\r\n          name\r\n        } = obj;\r\n        return this.createRadioOption(\r\n          id,\r\n          name,\r\n          selected.camp === id,\r\n          'camp'\r\n        );\r\n      });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"filters-group\">\r\n          <label \r\n            className=\"filters-group__label legco-label\" \r\n            htmlFor=\"constituencyType\"\r\n          >選區類別</label>\r\n          <div className=\"filters-group__options\">\r\n            <Listbox \r\n              id=\"constituencyType\"\r\n              name=\"constituencyType\"\r\n              value={ constTypeId }\r\n              onChange={ this.handleConstTypeChange }\r\n            >\r\n              <option value={ defaultConstTypeId }>\r\n                所有選區類別\r\n              </option>\r\n              { constTypeSelectGroup }\r\n            </Listbox>\r\n          </div>\r\n        </div>\r\n        <div className=\"filters-group\">\r\n          <label \r\n            className=\"filters-group__label legco-label\" \r\n            htmlFor=\"constituency_name\"\r\n          >選區</label>\r\n          <div className=\"filters-group__options\">\r\n            <Listbox \r\n              id=\"constituency_name\"\r\n              name=\"constituency\"\r\n              value={ constId }\r\n              onChange={ this.handleConstChange }\r\n              disabled={ constTypeId === defaultConstTypeId }\r\n            >\r\n              <option value={ defaultConstId }>\r\n                所有選區\r\n              </option>\r\n              { constSelectGroup }\r\n            </Listbox>\r\n          </div>\r\n        </div>\r\n        <div className=\"filters-group\">\r\n          <label className=\"filters-group__label legco-label\">政治立場</label>\r\n          <div className=\"filters-group__options legco-form-group\">\r\n            { campSelectGroup }\r\n          </div>\r\n        </div>\r\n        <div className=\"filters-group\">\r\n          <label className=\"filters-group__label legco-label\">個人資料</label>\r\n          <div className=\"filters-group__options legco-form-group\">\r\n            { checkboxGroup }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport {\r\n  SelectType,\r\n  CheckboxId,\r\n  ActiveFiltersProps\r\n} from 'constants/types';\r\n\r\nimport {\r\n  selectedDefaults,\r\n  checkedDefaults\r\n} from 'constants/defaults';\r\n\r\nimport {\r\n  partialSelectSet,\r\n  checkboxSet\r\n} from 'constants/filters';\r\n\r\nimport * as _ from 'constants/utilities';\r\n\r\nimport './ActiveFilters.scss';\r\n\r\nexport default class ActiveFilters extends React.Component<ActiveFiltersProps> {\r\n\r\n  /**\r\n   * Handler for click events on checkbox tags. Checkboxes are unchecked\r\n   * when the user clicks on their tags.\r\n   * \r\n   * @param id Identifier of the filter.\r\n   */\r\n  handleCheckboxTagClick = (id: CheckboxId) => {\r\n    this.props.handleCheckboxChange(id);\r\n  }\r\n\r\n  /**\r\n   * Handler for click events on select tags. The select group that the\r\n   * select option belongs to resets to its initial value when the user\r\n   * clicks on the tag.\r\n   * \r\n   * @param type Identifier of the filter.\r\n   */\r\n  handleSelectTagClick = (type: SelectType) => {\r\n    const initialValue = selectedDefaults[type];\r\n    // Resets the select group to its initial value\r\n    this.props.handleSelectChange(type, initialValue);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param handleClick Handler for click events on the tag.\r\n   * @param id Identifier of the current option.\r\n   * @param name Label of the current option.\r\n   */\r\n  createFilterTag(\r\n    handleClick: React.MouseEventHandler<HTMLButtonElement>,\r\n    name: string,\r\n    key?: string\r\n  ) {\r\n    return (\r\n      <div key={ key } className=\"filter-tag\">\r\n        <button \r\n          className=\"filter-tag__button\" \r\n          type=\"button\"\r\n          onClick={ handleClick }\r\n        >\r\n          <span className=\"filter-tag__cross-sign\">✕</span>\r\n          { name }\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      selected,\r\n      checked,\r\n      constituencies\r\n    } = this.props;\r\n\r\n    const selectSet = _.getFullSelectSet(\r\n      partialSelectSet,\r\n      constituencies\r\n    );\r\n\r\n    // Create tags for all select options currently chosen, given that\r\n    // they aren't the initial value of the select group they belong\r\n    // to.\r\n    const constituencyTags = Object.keys(selected)\r\n      .filter(_.isSelectType)\r\n      .filter(type => {\r\n        if (type === 'camp') return false;\r\n\r\n        const selectedId = selected[type];\r\n        return selectedId !== selectedDefaults[type];\r\n      })\r\n      .map(type => {\r\n        const selectedId = selected[type];\r\n        const selectOption = selectSet[type].find(opt => opt.id === selectedId);\r\n        if (!selectOption) {\r\n          throw Error(`Couldn't find select option with ID ${selectedId}.`);\r\n        }\r\n        return this.createFilterTag(\r\n          () => { this.handleSelectTagClick(type) }, \r\n          selectOption.name, \r\n          selectedId\r\n        );\r\n      });\r\n\r\n    // Create tags for all checkboxes currently checked\r\n    const personalInfoTags = Object.keys(checked)\r\n      .filter(_.isCheckboxId)\r\n      .filter(id => {\r\n        return checked[id] !== checkedDefaults[id];\r\n      })\r\n      .map(id => {\r\n        const checkboxOption = checkboxSet.find(obj => obj.id === id);\r\n        if (!checkboxOption) {\r\n          throw Error(`Couldn't find checkbox with ID ${id}.`);\r\n        }\r\n        return this.createFilterTag(\r\n          () => { this.handleCheckboxTagClick(id); },\r\n          checkboxOption.name,\r\n          id\r\n        );\r\n      });\r\n    \r\n    let campTag: JSX.Element | null;\r\n\r\n    if (selected.camp === selectedDefaults.camp) {\r\n      campTag = null;\r\n    } else {\r\n      const selectedID = selected.camp;\r\n      const selectedOption = selectSet.camp.find(opt => opt.id === selectedID);\r\n      if (!selectedOption) {\r\n        throw Error(`Couldn't find select option with ID ${selectedID}`);\r\n      }\r\n      campTag = this.createFilterTag(\r\n        () => { this.handleSelectTagClick('camp') },\r\n        selectedOption.name,\r\n        selectedID\r\n      );\r\n    }\r\n\r\n    // [1] Filter out empty groups so they don't generate any markup\r\n    // [2] Map each group to a list of tags with a leading label\r\n    const filterTagGroups = [\r\n      {\r\n        tags: constituencyTags,\r\n        label: '所屬選區'\r\n      },\r\n      {\r\n        tags: campTag ? [campTag] : [],\r\n        label: '政治立場'\r\n      },\r\n      {\r\n        tags: personalInfoTags,\r\n        label: '個人資料'\r\n      }\r\n    ]\r\n    .filter(obj => obj.tags.length > 0) // [1]\r\n    .map((obj, index) => { // [2]\r\n      const { tags, label } = obj;\r\n      return (\r\n        <div key={ index } className=\"selected-filters__group\">\r\n          <span className=\"selected-filters__label\">\r\n            { label }\r\n          </span>\r\n          { tags }\r\n        </div>\r\n      );\r\n    });\r\n\r\n    const activeFiltersClass = classnames(\r\n      'selected-filters',\r\n      filterTagGroups.length > 0 ? 'selected-filters--active' : null\r\n    )\r\n\r\n    return (\r\n      <div className={ activeFiltersClass }>\r\n        { filterTagGroups }\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport './CandidateCard.scss';\r\n\r\nimport {\r\n  Camp,\r\n  CandidateCardProps\r\n} from 'constants/types';\r\n\r\nexport default class CandidateCard extends React.Component<CandidateCardProps> {\r\n  colorMap = {\r\n    dem: 'yellow',\r\n    est: 'red',\r\n    ctr: 'dark-grey'\r\n  }\r\n  campMap = {\r\n    dem: '民主派',\r\n    est: '建制派',\r\n    ctr: '中間派'\r\n  }\r\n  getColorFromCampId(camp: Camp | null) {\r\n    return camp ? this.colorMap[camp] : 'green';\r\n  }\r\n  getCampFromId(camp: Camp | null) {\r\n    return camp ? this.campMap[camp] : '';\r\n  }\r\n  render() {\r\n    const {\r\n      id,\r\n      firstCandidate,\r\n      list,\r\n      affiliation,\r\n      camp\r\n    } = this.props;\r\n\r\n    const headerText = affiliation || `獨立${this.getCampFromId(camp)}`;\r\n    const name = firstCandidate + (list ? '團隊' : '');\r\n    const captionElem = list ? (\r\n      <div className=\"candidate-card__caption\">\r\n        <span >\r\n          { list.length }人名單\r\n        </span>\r\n      </div>\r\n    ) : null;\r\n\r\n    const href = `/candidate/${id}`;\r\n\r\n    const headerClass = classnames(\r\n      'candidate-card__header',\r\n      `candidate-card__header--${this.getColorFromCampId(camp)}`\r\n    );\r\n    return (\r\n      <div className=\"candidate-card\">\r\n        <div className={ headerClass }>\r\n          <span>\r\n            { headerText }\r\n          </span>\r\n        </div>\r\n        <a href={ href } className=\"candidate-card__link\">\r\n          <h3 className=\"candidate-card__name\">\r\n            { name }\r\n          </h3>\r\n        </a>\r\n        { captionElem }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {\r\n  Component\r\n} from 'react';\r\n\r\nimport classnames from 'classnames';\r\n\r\nimport SearchBox from './SearchBox/SearchBox';\r\nimport FiltersList from './FiltersList/FiltersList';\r\nimport ActiveFilters from './ActiveFilters/ActiveFilters';\r\nimport CandidateCard from 'components/CandidateCard/CandidateCard';\r\n\r\nimport {\r\n  Candidate,\r\n  Constituency,\r\n  PersonalInfo,\r\n  KeywordChangeHandler,\r\n  FiltersListProps,\r\n  CandidateCardProps,\r\n  ActiveFiltersProps,\r\n  SearchBoxProps,\r\n  HomePageState,\r\n  CheckboxChangeHandler,\r\n  SelectChangeHandler,\r\n} from 'constants/types';\r\n\r\nimport {\r\n  checkedDefaults,\r\n  selectedDefaults\r\n} from 'constants/defaults';\r\n\r\nimport {\r\n  partialSelectSet\r\n} from 'constants/filters';\r\n\r\nimport * as _ from 'constants/utilities';\r\n\r\nimport './Home.scss';\r\n\r\nexport default class Home extends Component<any, HomePageState> {\r\n  constituencies: Constituency[] = [];\r\n  candidates: Candidate[] = [];\r\n  personalInfoList: PersonalInfo[] = [];\r\n  personalInfoMap: Record<string, PersonalInfo> = {};\r\n  constTypeLabelMap: {\r\n    [id: string]: string\r\n  } = (\r\n    partialSelectSet.constituencyType.reduce((prev, current) => ({\r\n      ...prev,\r\n      [current.id]: current.name\r\n    }), {})\r\n  );\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: '',\r\n      checked: checkedDefaults,\r\n      selected: selectedDefaults,\r\n      resourceFetched: false,\r\n      showFiltersPanel: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    Promise.all(\r\n      [\r\n        _.getConstituencies(),\r\n        _.getCandidates(),\r\n        _.getPersonalInfoList()\r\n      ]\r\n    )\r\n    .then(results => {\r\n      const [\r\n        constituencies,\r\n        candidates,\r\n        personalInfoList\r\n      ] = results;\r\n\r\n      this.constituencies.push(...constituencies);\r\n      this.candidates.push(...candidates);\r\n      this.personalInfoList.push(...personalInfoList);\r\n      this.personalInfoMap = _.createPersonalInfoMap(personalInfoList);\r\n\r\n      this.setState({\r\n        resourceFetched: true\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n    })\r\n  }\r\n\r\n  toggleFilterPanel = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        showFiltersPanel: !prevState.showFiltersPanel\r\n      }\r\n    });\r\n  }\r\n\r\n  handleKeywordChange: KeywordChangeHandler = (event) => {\r\n    const { value } = event.target;\r\n    this.setState({\r\n      keyword: value\r\n    });\r\n  }\r\n\r\n  handleSelectChange: SelectChangeHandler = (type, value) => {\r\n    this.setState(prevState => {\r\n      const currentState = {\r\n        selected: {\r\n          ...prevState.selected,\r\n          [type]: value\r\n        }\r\n      };\r\n      if (type === 'constituencyType') {\r\n        // If constituency type is changed, reset constituency to its default [1].\r\n        const currentConstType = value;\r\n        const {\r\n          constituencyType: prevConstType,\r\n          constituency: prevConst\r\n        } = prevState.selected;\r\n        if (prevConstType !== currentConstType) {\r\n          currentState.selected.constituency = selectedDefaults.constituency; // [1]\r\n        } else {\r\n          currentState.selected.constituency = prevConst;\r\n        }\r\n      }\r\n      return currentState;\r\n    });\r\n  }\r\n\r\n  handleCheckboxChange: CheckboxChangeHandler = (id) => {\r\n    this.setState(prevState => {\r\n      let previouslyChecked = prevState.checked[id] || false;\r\n      return {\r\n        checked: {\r\n          ...prevState.checked,\r\n          [id]: !previouslyChecked\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  filterCandidates = (candidates: Candidate[]) => {\r\n    const {\r\n      keyword,\r\n      selected,\r\n      checked\r\n    } = this.state;\r\n\r\n    const currentFilters = {\r\n      ...selected,\r\n      ...checked\r\n    };\r\n\r\n    const filterDefaults = {\r\n      ...selectedDefaults,\r\n      ...checkedDefaults\r\n    };\r\n\r\n    const constTypeMap = _.createConstituencyTypeMap(\r\n      this.constituencies\r\n    );\r\n\r\n    const filtered = candidates.filter(obj => {\r\n      const {\r\n        constituencyId: constId,\r\n        names\r\n      } = obj;\r\n      const firstCandidate = Array.isArray(names) ? names[0] : names;\r\n      if (keyword.length > 0) {\r\n        if (firstCandidate.search(keyword) === -1) {\r\n          return false;\r\n        }\r\n      }\r\n      const constTypeId = constTypeMap[constId];\r\n      const personalInfo = this.personalInfoMap[obj.id];\r\n      const { dob, affiliation } = personalInfo;\r\n      const age = dob ? _.calculateAge(dob) : null;\r\n\r\n      const currentCandidate = {\r\n        ...personalInfo,\r\n        constituencyType: constTypeId,\r\n        constituency: constId,\r\n        youngerThan36: age ? age < 36 : false,\r\n        independent: !affiliation\r\n      };\r\n      // Loop over all filters. For each filter, we call type guard to confirm its\r\n      // identity as filter [1]. Then, check if that filter is active [2]. If so, \r\n      // check filter against current candidate, remove the candidate if they\r\n      // do not meet the filter condition [3].\r\n      for (let prop in currentFilters) {\r\n        if (_.isFilter(prop)) { // [1]\r\n          const filter = prop;\r\n          if (currentFilters[filter] === filterDefaults[filter]) // [2]\r\n            continue;\r\n          if (currentFilters[filter] !== currentCandidate[filter]) { // [3]\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n\r\n    return filtered;\r\n  }\r\n\r\n  createCandidateCard(candidate: Candidate) {\r\n    const {\r\n      id,\r\n      names\r\n    } = candidate;\r\n\r\n    const firstCandInfo = this.personalInfoMap[id];\r\n    if (!firstCandInfo) {\r\n      throw Error(`Couldn't find information of candidate with ID ${id}.`);\r\n    }\r\n    const {\r\n      name: firstCandidate,\r\n      affiliation,\r\n      camp\r\n    } = firstCandInfo;\r\n    const props: CandidateCardProps = {\r\n      id,\r\n      firstCandidate,\r\n      list: Array.isArray(names) ? names : null,\r\n      affiliation,\r\n      camp\r\n    };\r\n    return <CandidateCard { ...props } />;\r\n  }\r\n\r\n  createConstituencySection(\r\n    constituency: Constituency,\r\n    candidates: Candidate[]\r\n  ) {\r\n    if (!this.state.resourceFetched) return null;\r\n\r\n    const {\r\n      id: constId,\r\n      name: constName,\r\n      type: typeId\r\n    } = constituency;\r\n\r\n    const constType = this.constTypeLabelMap[typeId];\r\n\r\n    const filteredCands = (\r\n      candidates.filter(candObj => candObj.constituencyId === constId)\r\n    );\r\n\r\n    if (filteredCands.length === 0) return null;\r\n\r\n    const candListItems = filteredCands.map(candObj => (\r\n      <li key={ candObj.id } className=\"candidates__item\">\r\n        { this.createCandidateCard(candObj) }\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <section key={ constId } className=\"candidates__section\">\r\n        <header className=\"candidates__header\">\r\n          <h3 className=\"candidates__constituency-name\">{ constName }</h3>\r\n          <span className=\"candidates__constituency-type\">{ constType }</span>\r\n        </header>\r\n        <ul className=\"candidates__list\">\r\n          { candListItems }\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      keyword,\r\n      selected,\r\n      checked,\r\n      showFiltersPanel,\r\n    } = this.state;\r\n\r\n    const filtered = this.filterCandidates(this.candidates);\r\n    const constSections = this.constituencies\r\n      .map(constObj => this.createConstituencySection(constObj, filtered))\r\n      .filter(_.notNull);\r\n\r\n    const searchBoxProps: SearchBoxProps = {\r\n      keyword,\r\n      handleKeywordChange: this.handleKeywordChange\r\n    };\r\n\r\n    const filtersListProps: FiltersListProps = {\r\n      selected,\r\n      checked,\r\n      constituencies: this.constituencies,\r\n      handleSelectChange: this.handleSelectChange,\r\n      handleCheckboxChange: this.handleCheckboxChange\r\n    };\r\n\r\n    const activeFiltersProps: ActiveFiltersProps = {\r\n      selected,\r\n      checked,\r\n      constituencies: this.constituencies,\r\n      handleCheckboxChange: this.handleCheckboxChange,\r\n      handleSelectChange: this.handleSelectChange\r\n    };\r\n\r\n    const filtersPanelClass = classnames(\r\n      'filters-panel',\r\n      showFiltersPanel ? 'filters-panel--active' : null\r\n    );\r\n\r\n    const homeClass = classnames(\r\n      'home-page',\r\n      showFiltersPanel ? 'home-page--filters-panel-on' : null\r\n    );\r\n    \r\n    return (\r\n        <div className={ homeClass }>\r\n          <header className=\"home-page__header\">\r\n            <div className=\"legco-container\">\r\n              <h1 className=\"app-title\">\r\n                <span className=\"app-subtitle\">\r\n                  2016年立法會選舉\r\n                </span>\r\n                候選人查詢\r\n              </h1>\r\n            </div>\r\n          </header>\r\n          <div className=\"candidate-finder\">\r\n            <div className=\"legco-container\">\r\n            <form>\r\n              <SearchBox { ...searchBoxProps } />\r\n              <div>\r\n                <button \r\n                  className=\"candidate-finder__show-filters-btn\" \r\n                  type=\"button\" \r\n                  onClick={ this.toggleFilterPanel }\r\n                >\r\n                  顯示篩選條件\r\n                </button>\r\n              </div>\r\n              <div className={ filtersPanelClass }>\r\n                <header className=\"filters-panel__header\">\r\n                  <h1 className=\"filters-panel__title\">篩選條件</h1>\r\n                  <button \r\n                    className=\"filters-panel__go-back-btn\" \r\n                    type=\"button\"\r\n                    onClick={ this.toggleFilterPanel }\r\n                  >返回主頁</button>\r\n                </header>\r\n                <div className=\"filters-panel__body\">\r\n                  <FiltersList { ...filtersListProps } />\r\n                </div>\r\n                <footer className=\"filters-panel__footer\">\r\n                  <div className=\"legco-container\">\r\n                    <button \r\n                      type=\"button\" \r\n                      className=\"legco-button filters-panel__show-results-btn\"\r\n                      onClick={ this.toggleFilterPanel }\r\n                    >\r\n                      查看{ filtered.length }個結果\r\n                    </button>\r\n                  </div>\r\n                </footer>\r\n              </div>\r\n            </form>\r\n            </div>\r\n          </div>\r\n          <div className=\"legco-container\">\r\n            <ActiveFilters { ...activeFiltersProps } />\r\n            <div className=\"candidates\">\r\n              { constSections }\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\n\r\nimport Home from 'pages/Home/Home';\r\n\r\nimport 'styles/style.scss';\r\n\r\nexport default class App extends React.Component<any> {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}